---
import Layout from "@/layouts/Layout.astro"
import Projects from "@/components/Sections/Projects.astro"

import NavWrapper from "@/components/NavWrapper.astro"

const services = ["Web", "System", "Network", "CLI tools", "Data"]

const { lang = "en" } = Astro.props
const presentation = lang == "en" ?
	"I am a passionate developer. I love understanding how things work under the hood and build solutions. I specialize in web development, systems programming, and networking." :
	"Soy un programador apasionado. Disfruto entender cómo funcionan las cosas desde sus fundamentos y constuir soluciones. Estoy especializado en desarrollo web, programación de sistemas y redes."

---

<Layout title="Home - Richard Peña Bonifaz" lang={lang} path={lang == "en" ? "" : "/"}>
	<NavWrapper>
		<a href={lang == "en" ? "/resume" : "/resume/es"} class="resume-link">
			{lang == "en" ? "View CV" : "Ver CV"}
		</a>
	</NavWrapper>
	<div class="container">
		<div class="hero">
			<div class="presentation">
				<h1>Richard Peña</h1>
				<h2>Software Engineer</h2>
				<p>{presentation}</p>
			</div>
			<div>
				<ul class="services">
					{services.map(service => (
					<li>{service}</li>
					))}
				</ul>
			</div>
			<div class="project-indicator">
				<h2 class="indicator">{lang == "en" ? "Projects" : "Proyectos"}</h2>
				<img src="/imgs/down-arrow.svg" title="dtwn" alt="go to bottom"/>
			</div>
		</div>
		<Projects lang={ lang } />
		<div class="contact">
			<form id="contact" action="/send" method="POST" class="contact-form">
				<h3>{lang == "en" ? "Contact me" : "Contáctame"}</h3>
				<input type="text" name="name" placeholder={ lang == "en" ? "Name" : "Nombre" } required />
				<input type="hidden" name="ts" value="${Date.now()}" />
				<input type="email" name="email" placeholder="Email" required />
				<input type="text" name="lang" hidden value={lang} />
				<input type="text" name="botcheck" style="display: none;" tabindex="-1" autocomplete="off" />
				<textarea name="message" placeholder={lang == "en" ? "Tell me something" : "Cuéntame algo"} required />
				<div id="toast" class="toast hidden"></div>
			</form>
			<div class="media">
				<button type="submit" form="contact" class="submit-btn">
					{lang == "en" ? "Send" : "Enviar"}
				</button>
				<div class="social">
					<h4>{lang == "en" ? "Connect with me" : "Conecta conmigo"}</h4>
					<div class="social-icons">
						<a href="https://github.com/richardhapb" target="_blank" rel="noopener noreferrer"><i class="fab fa-github"></i></a>
						<a href="https://linkedin.com/in/richard-hapb" target="_blank" rel="noopener noreferrer"><i class="fab fa-linkedin"></i></a>
						<a href="https://x.com/richard_hapb" target="_blank" rel="noopener noreferrer"><i class="fab fa-x-twitter"></i></a>
						<a href="https://medium.com/@richard.penab" target="_blank" rel="noopener noreferrer"><i class="fab fa-medium"></i></a>
					</div>
					<a href="/resume" title="Visit my curriculum page"><h3 class="resume-link">{lang == "en" ? "View my CV" : "Ver mi CV"}</h3></a>
				</div>
			</div>
		</div>
	</div>
	<script>
	const form = document.getElementById('contact') as HTMLFormElement;
	const toast = document.getElementById('toast') as HTMLDivElement;
	const submitBtn = document.querySelector('button[type="submit"]') as HTMLButtonElement;

	form?.addEventListener('submit', async (e) => {
		e.preventDefault();

		if (!submitBtn) return;

		// Disable button and show loading state
		submitBtn.disabled = true;
		submitBtn.classList.add('loading');

		const formData = new FormData(form);

		try {
			const message = formData.get("message")?.toString() || "";

			if (message.trim().length === 0) {
				showToast("Invalid message");
				return;
			}

			if (message.trim().length === 0) {
				showToast("Invalid message");
			}

			const response = await fetch(form.action, {
				method: 'POST',
				body: formData,
			});

			if (response.ok) {
				showToast(formData.get('lang') === 'en' ? 'Message sent successfully!' : 'Mensaje enviado exitosamente!');
				form.reset();
			} else {
				showToast(formData.get('lang') === 'en' ? 'Error sending message' : 'Error al enviar el mensaje');
			}
		} catch (error) {
			showToast(formData.get('lang') === 'en' ? 'Error sending message' : 'Error al enviar el mensaje');
		} finally {
			// Re-enable button and remove loading state
			submitBtn.disabled = false;
			submitBtn.classList.remove('loading');
		}
	});

	function showToast(message: string) {
		if (!toast) return;

		toast.textContent = message;
		toast.classList.remove('hidden');

		setTimeout(() => {
			toast.classList.add('hidden');
		}, 3000);
	}
	</script>
</Layout>

<style>
:root {
	background: url("/imgs/background-smooth-3.jpg") no-repeat center center fixed;
	background-size: cover;
}

h1 {
	font-size: 3rem;
	margin: 0;
}

p {
	font-size: 1.5rem;
}

h2 {
	font-size: 2rem;
	color: var(--secondary-font-color);

	&.indicator {
		color: var(--tertiary-text-color);
	}
}

.project-indicator {
	position: absolute;
	bottom: 1rem;
}

.container {
	max-width: 100%;
	margin: 0 auto;
	min-height: 200dvh;
}

.hero {
	min-height: 100dvh;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	gap: 10rem;

	img {
		width: 50px;
		height: 50px;
		display: flex;
		margin: 0 auto;
		align-items: center;
		justify-content: center;
		text-align: center;
		animation: bounce 2s infinite;
	}
}

.presentation {
	border: 1px white;
	border-radius: 5px;
	text-align: center;
	backdrop-filter: blur(5px);
	max-width: 60%;
	margin: 0 auto;
	padding: 1rem;
	background-color: #5554;
	box-shadow: 0 0 10px 5px rgba(0,0,0,0.1);
}

.services {
	display: flex;
	flex-direction: row;
	gap: 5rem;
	list-style: none;
	padding: 0;
	font-size: 2rem;

	li {
		animation: pump 10s ease-in-out infinite;
		&:nth-child(1) { animation-delay: 0s; }
		&:nth-child(2) { animation-delay: 0.4s; }
		&:nth-child(3) { animation-delay: 0.8s; }
		&:nth-child(4) { animation-delay: 1.2s; }
		&:nth-child(5) { animation-delay: 1.6s; }
	}
}

.contact {
	display: flex;
	flex-direction: row;
	justify-content: center;
	gap: 6rem;
	padding: 2rem;

	h3 {
		color: var(--subtext-color);
		text-transform: uppercase;
	}

	form {
		display: flex;
		flex-direction: column;
		min-width: 500px;
		gap: 1rem;
		background: #3333;
		backdrop-filter: blur(5px);
		max-width: 400px;
		padding: 1rem;

		input, textarea {
			color: var(--main-text-color);
			background: #3333;
			padding: 0.5rem;
			font-size: 1.2rem;
			border: none;
		}

		textarea {
			min-height: 300px;
			resize: none;
		}
	}


	.media {


		display: flex;
		flex-direction: column;
		gap: 3rem;
		align-items: center;
		text-align: center;

		button[type="submit"] {
			background: var(--highlight);
			border-radius: 5px;
			padding: 0.5rem 1rem;
			width: 200px;
			margin-bottom: 2rem;
			font-size: 1.1rem;
			font-weight: bold;
			cursor: pointer;
			transition: all 0.2s ease-out;
			position: relative;
			color: black;
			border: none;

			&:disabled {
				opacity: 0.7;
				cursor: not-allowed;
			}

			&.loading {
				position: relative;
				color: transparent;
				&::after {
					content: "";
					position: absolute;
					width: 24px;
					height: 24px;
					top: 50%;
					left: 50%;
					transform: translate(-50%, -50%);
					border: 3px solid black;
					border-top-color: transparent;
					border-radius: 50%;
					animation: rotate 0.8s linear infinite;
					z-index: 1;				   }
			}
		}

		input:not(:hover) {
			animation: scaleBack 0.4s ease-out;
		}

		input:hover {
			transform: scale(1.1);
			transition: transform 0.2s ease-out;
		}

	}
	.social {
		display: flex;
		flex-direction: column;
		gap: 1rem;

		.social-icons {
			display: flex;
			gap: 1.5rem;

			a {
				color: var(--main-text-color);
				font-size: 1.5rem;
				transition: color 0.3s ease;

				&:hover {
					color: var(--highlight);
				}
			}
		}
	}
}

h3.resume-link, .resume-link {
	display: inline-flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--highlight);
	font-weight: 500;
	font-size: 1.3rem;
	text-decoration: none;
	transition: color 0.3s ease;
}


.resume-link:hover {
	color: var(--text);
}

.toast {
	color: black;
	position: fixed;
	bottom: 20px;
	left: 50%;
	transform: translateX(-50%);
	background: var(--highlight);
	padding: 1rem 2rem;
	border-radius: 5px;
	transition: opacity 0.3s ease;
}

.toast.hidden {
	opacity: 0;
	pointer-events: none;
}



@keyframes scaleBack {
	0% {
	transform: scale(1.1);
	}
	80% {
	transform: scale(0.95);
	}
	100% {
	transform: scale(1);
	}
}

@keyframes rotate {
	0% {
	transform: translate(-50%, -50%) rotate(0deg);
	}
	100% {
	transform: translate(-50%, -50%) rotate(360deg);
	}
}

@keyframes pump {
	0%, 100% {
		transform: scale(1);
	}
	25% {
		transform: scale(1.1);
	}
	50% {
		transform: scale(1);
	}
	75% {
		transform: scale(0.9);
	}
}

@keyframes bounce {
0%, 100% {
	transform: translateY(0);
}
50% {
	transform: translateY(-10px);
}
}

h1 {
}

/* Responsive styles */
@media (max-width: 768px) {
	:root {
		background: var(--main-bg-color);
	}

	.presentation {
		max-width: 90%;
		padding: 1rem;

		h1 {
			font-size: 2.5rem;
		}

		h2 {
			font-size: 1.8rem;
		}

		p {
			font-size: 1.2rem;
		}
	}

	.services {
		flex-wrap: wrap;
		justify-content: center;
		gap: 2rem;
		font-size: 1.5rem;
	}

	.contact {
		flex-direction: column;
		align-items: center;
		padding: 1rem;

		form {
			min-width: unset;
			width: 100%;
			max-width: 100%;
		}

		.media {
			width: 100%;

			button[type="submit"] {
				width: 100%;
				color: black;
			}
		}
	}

	.hero {
		gap: 3rem;
	}

	.project-indicator {
		position: relative;
	}

}


	@media (max-height: 1000px) {
		.project-indicator {
			position: relative;
		}
	}

@media (max-height: 660px) {
	.hero {
		margin-top: 1rem;
		justify-content: start;
	}
}

@media (max-width: 480px) {
	.hero {
		margin-top: 1rem;
		justify-content: start;
	}

	.hero {
		gap: 2rem;
	}

	.presentation h1 {
		font-size: 2rem;
	}
}
</style>

